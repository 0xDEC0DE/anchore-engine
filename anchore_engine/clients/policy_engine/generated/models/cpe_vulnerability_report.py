# coding: utf-8

"""
    anchore_engine.services.policy_engine

    This is a policy evaluation service. It receives push-events from external systems for data updates and provides an api for requesting image policy checks  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: zach@anchore.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CpeVulnerabilityReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vulnerability_id': 'str',
        'severity': 'str',
        'link': 'str',
        'pkg_type': 'str',
        'name': 'str',
        'version': 'str',
        'pkg_path': 'str',
        'cpe': 'str',
        'feed_name': 'str',
        'feed_namespace': 'str'
    }

    attribute_map = {
        'vulnerability_id': 'vulnerability_id',
        'severity': 'severity',
        'link': 'link',
        'pkg_type': 'pkg_type',
        'name': 'name',
        'version': 'version',
        'pkg_path': 'pkg_path',
        'cpe': 'cpe',
        'feed_name': 'feed_name',
        'feed_namespace': 'feed_namespace'
    }

    def __init__(self, vulnerability_id=None, severity=None, link=None, pkg_type=None, name=None, version=None, pkg_path=None, cpe=None, feed_name=None, feed_namespace=None):  # noqa: E501
        """CpeVulnerabilityReport - a model defined in Swagger"""  # noqa: E501

        self._vulnerability_id = None
        self._severity = None
        self._link = None
        self._pkg_type = None
        self._name = None
        self._version = None
        self._pkg_path = None
        self._cpe = None
        self._feed_name = None
        self._feed_namespace = None
        self.discriminator = None

        if vulnerability_id is not None:
            self.vulnerability_id = vulnerability_id
        if severity is not None:
            self.severity = severity
        if link is not None:
            self.link = link
        if pkg_type is not None:
            self.pkg_type = pkg_type
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if pkg_path is not None:
            self.pkg_path = pkg_path
        if cpe is not None:
            self.cpe = cpe
        if feed_name is not None:
            self.feed_name = feed_name
        if feed_namespace is not None:
            self.feed_namespace = feed_namespace

    @property
    def vulnerability_id(self):
        """Gets the vulnerability_id of this CpeVulnerabilityReport.  # noqa: E501

        vulnerability id  # noqa: E501

        :return: The vulnerability_id of this CpeVulnerabilityReport.  # noqa: E501
        :rtype: str
        """
        return self._vulnerability_id

    @vulnerability_id.setter
    def vulnerability_id(self, vulnerability_id):
        """Sets the vulnerability_id of this CpeVulnerabilityReport.

        vulnerability id  # noqa: E501

        :param vulnerability_id: The vulnerability_id of this CpeVulnerabilityReport.  # noqa: E501
        :type: str
        """

        self._vulnerability_id = vulnerability_id

    @property
    def severity(self):
        """Gets the severity of this CpeVulnerabilityReport.  # noqa: E501

        severity of the vulnerability  # noqa: E501

        :return: The severity of this CpeVulnerabilityReport.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this CpeVulnerabilityReport.

        severity of the vulnerability  # noqa: E501

        :param severity: The severity of this CpeVulnerabilityReport.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def link(self):
        """Gets the link of this CpeVulnerabilityReport.  # noqa: E501

        source URL to vulnerability information  # noqa: E501

        :return: The link of this CpeVulnerabilityReport.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this CpeVulnerabilityReport.

        source URL to vulnerability information  # noqa: E501

        :param link: The link of this CpeVulnerabilityReport.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def pkg_type(self):
        """Gets the pkg_type of this CpeVulnerabilityReport.  # noqa: E501

        type of software package (e.g. java, npm, gem, ...)  # noqa: E501

        :return: The pkg_type of this CpeVulnerabilityReport.  # noqa: E501
        :rtype: str
        """
        return self._pkg_type

    @pkg_type.setter
    def pkg_type(self, pkg_type):
        """Sets the pkg_type of this CpeVulnerabilityReport.

        type of software package (e.g. java, npm, gem, ...)  # noqa: E501

        :param pkg_type: The pkg_type of this CpeVulnerabilityReport.  # noqa: E501
        :type: str
        """

        self._pkg_type = pkg_type

    @property
    def name(self):
        """Gets the name of this CpeVulnerabilityReport.  # noqa: E501

        name of software from CPE  # noqa: E501

        :return: The name of this CpeVulnerabilityReport.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CpeVulnerabilityReport.

        name of software from CPE  # noqa: E501

        :param name: The name of this CpeVulnerabilityReport.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this CpeVulnerabilityReport.  # noqa: E501

        version of software fro CPE  # noqa: E501

        :return: The version of this CpeVulnerabilityReport.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CpeVulnerabilityReport.

        version of software fro CPE  # noqa: E501

        :param version: The version of this CpeVulnerabilityReport.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def pkg_path(self):
        """Gets the pkg_path of this CpeVulnerabilityReport.  # noqa: E501

        location of software package artifact within the image  # noqa: E501

        :return: The pkg_path of this CpeVulnerabilityReport.  # noqa: E501
        :rtype: str
        """
        return self._pkg_path

    @pkg_path.setter
    def pkg_path(self, pkg_path):
        """Sets the pkg_path of this CpeVulnerabilityReport.

        location of software package artifact within the image  # noqa: E501

        :param pkg_path: The pkg_path of this CpeVulnerabilityReport.  # noqa: E501
        :type: str
        """

        self._pkg_path = pkg_path

    @property
    def cpe(self):
        """Gets the cpe of this CpeVulnerabilityReport.  # noqa: E501

        full CPE string of software artifact  # noqa: E501

        :return: The cpe of this CpeVulnerabilityReport.  # noqa: E501
        :rtype: str
        """
        return self._cpe

    @cpe.setter
    def cpe(self, cpe):
        """Sets the cpe of this CpeVulnerabilityReport.

        full CPE string of software artifact  # noqa: E501

        :param cpe: The cpe of this CpeVulnerabilityReport.  # noqa: E501
        :type: str
        """

        self._cpe = cpe

    @property
    def feed_name(self):
        """Gets the feed_name of this CpeVulnerabilityReport.  # noqa: E501

        name of the feed where vulnerability was matched  # noqa: E501

        :return: The feed_name of this CpeVulnerabilityReport.  # noqa: E501
        :rtype: str
        """
        return self._feed_name

    @feed_name.setter
    def feed_name(self, feed_name):
        """Sets the feed_name of this CpeVulnerabilityReport.

        name of the feed where vulnerability was matched  # noqa: E501

        :param feed_name: The feed_name of this CpeVulnerabilityReport.  # noqa: E501
        :type: str
        """

        self._feed_name = feed_name

    @property
    def feed_namespace(self):
        """Gets the feed_namespace of this CpeVulnerabilityReport.  # noqa: E501

        name of the feed group where the vulnerability was matched  # noqa: E501

        :return: The feed_namespace of this CpeVulnerabilityReport.  # noqa: E501
        :rtype: str
        """
        return self._feed_namespace

    @feed_namespace.setter
    def feed_namespace(self, feed_namespace):
        """Sets the feed_namespace of this CpeVulnerabilityReport.

        name of the feed group where the vulnerability was matched  # noqa: E501

        :param feed_namespace: The feed_namespace of this CpeVulnerabilityReport.  # noqa: E501
        :type: str
        """

        self._feed_namespace = feed_namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CpeVulnerabilityReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
